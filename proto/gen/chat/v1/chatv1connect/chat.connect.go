// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chat/v1/chat.proto

package chatv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pdmccormick/learning-connectrpc/proto/gen/chat/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ChatName is the fully-qualified name of the Chat service.
	ChatName = "chat.v1.Chat"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatSayProcedure is the fully-qualified name of the Chat's Say RPC.
	ChatSayProcedure = "/chat.v1.Chat/Say"
	// ChatListenProcedure is the fully-qualified name of the Chat's Listen RPC.
	ChatListenProcedure = "/chat.v1.Chat/Listen"
)

// ChatClient is a client for the chat.v1.Chat service.
type ChatClient interface {
	Say(context.Context, *connect.Request[v1.SayRequest]) (*connect.Response[v1.SayResponse], error)
	Listen(context.Context, *connect.Request[v1.ListenRequest]) (*connect.ServerStreamForClient[v1.ListenResponse], error)
}

// NewChatClient constructs a client for the chat.v1.Chat service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chatClient{
		say: connect.NewClient[v1.SayRequest, v1.SayResponse](
			httpClient,
			baseURL+ChatSayProcedure,
			opts...,
		),
		listen: connect.NewClient[v1.ListenRequest, v1.ListenResponse](
			httpClient,
			baseURL+ChatListenProcedure,
			opts...,
		),
	}
}

// chatClient implements ChatClient.
type chatClient struct {
	say    *connect.Client[v1.SayRequest, v1.SayResponse]
	listen *connect.Client[v1.ListenRequest, v1.ListenResponse]
}

// Say calls chat.v1.Chat.Say.
func (c *chatClient) Say(ctx context.Context, req *connect.Request[v1.SayRequest]) (*connect.Response[v1.SayResponse], error) {
	return c.say.CallUnary(ctx, req)
}

// Listen calls chat.v1.Chat.Listen.
func (c *chatClient) Listen(ctx context.Context, req *connect.Request[v1.ListenRequest]) (*connect.ServerStreamForClient[v1.ListenResponse], error) {
	return c.listen.CallServerStream(ctx, req)
}

// ChatHandler is an implementation of the chat.v1.Chat service.
type ChatHandler interface {
	Say(context.Context, *connect.Request[v1.SayRequest]) (*connect.Response[v1.SayResponse], error)
	Listen(context.Context, *connect.Request[v1.ListenRequest], *connect.ServerStream[v1.ListenResponse]) error
}

// NewChatHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatHandler(svc ChatHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatSayHandler := connect.NewUnaryHandler(
		ChatSayProcedure,
		svc.Say,
		opts...,
	)
	chatListenHandler := connect.NewServerStreamHandler(
		ChatListenProcedure,
		svc.Listen,
		opts...,
	)
	return "/chat.v1.Chat/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatSayProcedure:
			chatSayHandler.ServeHTTP(w, r)
		case ChatListenProcedure:
			chatListenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatHandler returns CodeUnimplemented from all methods.
type UnimplementedChatHandler struct{}

func (UnimplementedChatHandler) Say(context.Context, *connect.Request[v1.SayRequest]) (*connect.Response[v1.SayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.Chat.Say is not implemented"))
}

func (UnimplementedChatHandler) Listen(context.Context, *connect.Request[v1.ListenRequest], *connect.ServerStream[v1.ListenResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.Chat.Listen is not implemented"))
}
